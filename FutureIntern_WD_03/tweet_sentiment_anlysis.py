# -*- coding: utf-8 -*-
"""Tweet sentiment anlysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OWJbqVWMVXm9UoaSV2F80aHOTOdbzC2T
"""

# install kaggle library
!pip install kaggle

"""upload your kaggle.json file"""

#configuring the path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

#API to fetch the dataset from kaggle
!kaggle datasets download -d kazanova/sentiment140

# extracting the compressed dataset
from zipfile import ZipFile
dataset = '/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""import the dependcies"""

import nltk # imports the nltk library
import pandas as pd
import numpy as np
import re
import matplotlib.pyplot as plt
import seaborn as sns
from nltk.stem.porter import PorterStemmer
nltk.download('stopwords') # downloads the stopwords resource
from nltk.corpus import stopwords # imports the stopwords resource
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

# printing stopwords in english
print(stopwords.words('english'))

# loading the data from csv file to pandas dataframe
df = pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding='latin-1')

# checking the number of rows and colomns
df.shape

#printing the first 10 rows of the dataframe
df.head(10)

#naming the colomns and reading the dataset again
df.columns = ['target','id','date','flag', 'user', 'text']

# checking the number of rows and columns
df.shape

#printing the first 10 rows of dataframe
df.head(10)

#counting the number of missing values inthe dataset
df.isnull().sum()

# checking the distribution of target colomns
df['target'].value_counts()

"""Convert the target "4" to "1"
"""

twitters = df.copy()
twitters['target'] = twitters['target'].replace(4,1)

#checking the distribution of target colomns
twitters['target'].value_counts()

"""0 --> negative tweet
1 --> positive tweet

Stemming
"""

port_stem = PorterStemmer()

def stemming(content):
  stemmed_content = re
  content = re.sub('[^a-zA-Z]',' ',content)
  content = content.lower()
  content = content.split()
  content = [port_stem.stem(word) for word in content if not word in stopwords.words('english')]
  content = ' '.join(content)
  return content

twitter_data = twitters['text'].apply(stemming)

twitter_data.head()

print(twitter_data)

# Assuming 'twitters' is the original DataFrame
print(twitters['target'])

#separting the data and label

X = twitter_data.values # Access the values directly from the Series
y = twitters['target'].values

print(X)

print(y)

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, stratify=y, random_state=2)

print(X.shape, X_train.shape, X_test.shape)

print(X_train)

print(X_test)

#converting the textual data to numerical data

vectorizer = TfidfVectorizer()
vectorizer.fit(X_train)

X_train = vectorizer.fit_transform(X_train)
X_test = vectorizer.transform(X_test)

print(X_train)

print(X_test)

"""Training the Machine Learning Model

Logistic Regression
"""

model = LogisticRegression(max_iter=1000) # Changed 'max_itr' to 'max_iter'

model.fit(X_train, y_train)

"""Model Evaluation

Accuracy score
"""

# accuracy score on the training data
X_train_prediction = model.predict(X_train)
training_data_accuracy = accuracy_score(X_train_prediction, y_train) # Changed 'Y_train' to 'y_train'

print('Accuracy score of the training data : ', training_data_accuracy)

#accuracy score on the test data
X_test_prediction = model.predict(X_test)
test_data_accuracy = accuracy_score(X_test_prediction, y_test) # Changed 'Y_test' to 'y_test'

print('Accuracy score of the test data : ', test_data_accuracy)

"""**Model Accuracy =77.8%**


Saving the trained model




"""

import pickle

filename = 'trained_model.pkl'
pickle.dump(model, open(filename, 'wb'))

"""Using the saved model for future prediction"""

#loading the saved model
loaded_model = pickle.load(open('trained_model.pkl', 'rb'))

X_new = X_test[1100]
print(y_test[200]) # Changed Y_test to y_test

prediction = loaded_model.predict(X_new)
print(prediction)

if (prediction[0]==0):
  print('Negative Tweet')
else:
  print('Positive Tweet')