# -*- coding: utf-8 -*-
"""House_price_Prediction.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1VdgnfhCyL1f1IZHS6Kkl9gn68wNRK70t
"""

#Import Libraries
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, mean_absolute_error

#Create a synthetic dataset (for the sake of this example)
data = {
    'square_footage': [1500, 1800, 2400, 3000, 3500, 4000, 4500, 5000],
    'bedrooms': [3, 4, 3, 4, 5, 5, 6, 6],
    'price': [400000, 450000, 500000, 600000, 650000, 700000, 750000, 800000]
}

# Convert the dictionary to a pandas DataFrame
df = pd.DataFrame(data)
df.head()

#Split the data
X = df[['square_footage', 'bedrooms']]  # Features
y = df['price']  # Target variable

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Create and train the Linear Regression model
linear_model = LinearRegression()
linear_model.fit(X_train, y_train)

# Predict on the test set
y_pred_linear = linear_model.predict(X_test)

#Evaluate Linear Regression model
from sklearn.metrics import mean_squared_error, mean_absolute_error

# Calculate Mean Squared Error (MSE) and Mean Absolute Error (MAE) for the Linear Regression model
mse_linear = mean_squared_error(y_test, y_pred_linear)
mae_linear = mean_absolute_error(y_test, y_pred_linear)

# Print the evaluation metrics for Linear Regression
print(f"Linear Regression - MSE: {mse_linear}, MAE: {mae_linear}")

# Step 7: Visualization
plt.figure(figsize=(12, 6))

# Plotting Linear Regression predictions
plt.subplot(1, 2, 1)
plt.scatter(y_test, y_pred_linear, color='blue', label='Linear Regression Predictions')
plt.plot([min(y_test), max(y_test)], [min(y_test), max(y_test)], color='red', linestyle='--', label='Perfect Prediction')
plt.title("Linear Regression Predictions vs Actual Prices")
plt.xlabel("Actual Prices")
plt.ylabel("Predicted Prices")
plt.legend()

plt.tight_layout()
plt.show()

#Residual Plot for Linear Regression
residuals = y_test - y_pred_linear

plt.figure(figsize=(8, 6))
plt.scatter(y_pred_linear, residuals, color='blue', edgecolor='black')
plt.axhline(y=0, color='red', linestyle='--', label='Zero Residual')
plt.title("Residual Plot for Linear Regression")
plt.xlabel("Predicted Prices")
plt.ylabel("Residuals")
plt.legend()
plt.show()

#Error Distribution Plot for Linear Regression
plt.figure(figsize=(8, 6))
sns.histplot(residuals, kde=True, color='purple')
plt.title("Error Distribution for Linear Regression")
plt.xlabel("Residuals")
plt.ylabel("Frequency")
plt.show()

# Step 9: Predict house price for new property
new_property = pd.DataFrame({'square_footage': [200], 'bedrooms': [6]})

linear_prediction = linear_model.predict(new_property)

print(f"Predicted Price for the new property (Linear Regression): ${linear_prediction[0]:,.2f}")